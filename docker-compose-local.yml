version: '3.9'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: kafka-zookeeper-svc
    restart: "no"
    networks:
      - prod-network
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    volumes:
#      - /tmp/data-docker/zookeeper-data:/var/lib/zookeeper/data
#      - /tmp/data-docker/zookeeper-log:/var/lib/zookeeper/log
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-log:/var/lib/zookeeper/log
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka-svc
    restart: "no"
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "30092:30092"
      - "9999:9999"
    networks:
      - prod-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka:9092,EXTERNAL://localhost:30092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: "INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:30092"
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_PROTOCOL: PLAINTEXT
      ALLOW_PLAINTEXT_LISTENER: yes
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_JMX_OPTS: -Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.port=9999 -Dcom.sun.management.jmxremote.rmi.port=9999 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false
      KAFKA_JMX_PORT: 9999
      KAFKA_HEAP_OPTS: "-Xmx512M -Xms256M"
      KAFKA_JMX_HOSTNAME: kafka
    volumes:
#      - /tmp/data-docker/kafka-data:/var/lib/kafka/data
      - kafka-data:/var/lib/kafka/data

  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.0
    container_name: kafka-schema-registry-svc
    restart: "no"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    depends_on:
      - kafka
    networks:
      - prod-network
    ports:
      - "9093:9093"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9092
      SCHEMA_REGISTRY_KAFKASTORE_SECURITY_PROTOCOL: PLAINTEXT
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://schema-registry:9093
      SCHEMA_REGISTRY_SCHEMA_REGISTRY_INTER_INSTANCE_PROTOCOL: "http"
      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: INFO
      SCHEMA_REGISTRY_KAFKASTORE_TOPIC: _schemas

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 9094:9094
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    environment:
      DYNAMIC_CONFIG_ENABLED: true
      SERVER_PORT: 9094
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_METRICS_PORT: 9999
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:9093
    depends_on:
      - kafka
      - zookeeper
      - schema-registry
    networks:
      - prod-network

  redis:
    container_name: redis-svc
    image: redis/redis-stack-server:6.2.6-v15
    ports:
      - 6379:6379
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    volumes:
#      - /tmp/data-docker/redis:/data
      - redis-data:/data
    networks:
      - prod-network

  mysql:
    image: mysql:8.2.0
    container_name: db-mysql-svc
    restart: "no"
    command: --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_DATABASE: byteweaver
      MYSQL_USER: byteweaver
      MYSQL_ROOT_PASSWORD: 12345678
      MYSQL_PASSWORD: 12345678
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    ports:
      - "3306:3306"
    networks:
      - prod-network
    volumes:
#      - /tmp/data-docker/mysql:/var/lib/mysql
      - mysql-data:/var/lib/mysql

networks:
  prod-network:
    driver: bridge

volumes:
  mysql-data:
  kafka-data:
  redis-data:
  zookeeper-data:
  zookeeper-log: